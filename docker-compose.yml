version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16.1-alpine3.18
    container_name: postgres-db
    environment:
      POSTGRES_DB: maindb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: Admin123!
      #PGDATA: "/var/lib/postgresql/data/pgdata"
    ports:
      - "7432:5432"
    volumes:
      - "./postgres_data:/var/lib/postgresql/data"
      - "./init-scripts:/docker-entrypoint-initdb.d" # initialization scripts
      
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d maindb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

    restart: unless-stopped

 # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq_utis
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: Admin123!
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "7672:5672"   # AMQP protocol
      - "17672:15672" # Management UI
    volumes:
      - "./rabbitmq_data:/var/lib/rabbitmq"
      - "./rabbitmq_logs:/var/log/rabbitmq"
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped

  tasks-service:
    build:
      context: ./tasks-service/
      dockerfile: Utis.Tasks.WebApi/Dockerfile
    container_name: tasks-service
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=maindb;Username=admin;Password=Admin123!
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
      - RabbitMQ__VirtualHost=/
      - RabbitMQ__QueueName=expired-tasks
    volumes:
      - "./logs/tasks-service:/app/Logs"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy  
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  processing-service:
    build:
      context: ./processing-service/
      dockerfile: Utis.Processing.Service/Dockerfile
    container_name: processing-service
    #ports:
    #  - "5002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:8080
      - RabbitMQ__Host=rabbitmq_utis
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
      - RabbitMQ__VirtualHost=/
      - RabbitMQ__QueueName=expired-tasks
    volumes:
       - "./logs/processing-service:/app/Logs"
       #- "./logs/processing-service:/app/Utis.Processing.Service/Logs"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-net
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    restart: unless-stopped

networks:
  microservices-net:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  rabbitmq_logs:
    driver: local